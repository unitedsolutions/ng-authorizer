{"version":3,"sources":["../../../../../tmp/add-edit-view/data-sender/routes-builder/route-tree-builder/route-tree-builder.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,CAAC,MAAkB,QAAQ,CAAC;AACxC,OAAO,kBAAkB,MAAM,6CAA6C,CAAC;AAC7E,OAAO,iBAAiB,MAAO,yCAAyC,CAAC;AAEzE,MAAM,CAAC,OAAO,2BAA2B,KAAK,EAAE,UAAU,EAAE,aAAa,EAAE,KAAS;IAAT,sBAAA,EAAA,SAAS;IAC7E,IAAA,mBAAK,CAAU;IACpB,IAAI,IAAI,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC;IACxB,IAAI,UAAU,GAAG,KAAK,GAAG,CAAC,CAAC;IAC3B,IAAI,SAAS,GAAG,KAAK,CAAC,UAAU,CAAC,CAAC;IAC7B,IAAA,mDAAS,CAAiC;IAE/C,EAAE,CAAA,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;QACd,SAAS,GAAG,EAAC,IAAI,MAAA,EAAC,CAAC;IACrB,CAAC;IAED,EAAE,CAAA,CAAC,UAAU,CAAC,OAAO,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;QACxC,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IAC7B,CAAC;IAED,EAAE,CAAA,CAAC,SAAS,CAAC,CAAC,CAAC;QACR,IAAA,6BAAQ,CAAc;QAE3B,EAAE,CAAA,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;YACb,IAAI,YAAY,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC;YAC9C,IAAI,UAAU,GAAG,kBAAkB,CAAC,IAAI,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC;YAE7D,CAAC,CAAC,MAAM,CAAC,SAAS,EAAE,EAAC,QAAQ,EAAE,QAAQ,GAAG,EAAE,EAAC,CAAC,CAAC;YAE/C,EAAE,CAAA,CAAC,UAAU,CAAC,CAAC,CAAC;gBACd,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YAC5B,CAAC;QACH,CAAC;QAED,gBAAgB,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,EAAE,QAAQ,EAAE,aAAa,EAAE,UAAU,CAAC,CAAC;IAC1E,CAAC;IAAC,IAAI,CAAC,CAAC;QACD,IAAA,wBAAiB,EAAE,2BAAS,CAAU;QAE3C,EAAE,CAAA,CAAC,QAAQ,CAAC,CAAC,CAAC;YACZ,CAAC,CAAC,MAAM,CAAC,SAAS,EAAE,EAAC,OAAO,EAAE,QAAQ,EAAC,CAAC,CAAC;QAC3C,CAAC;QAED,EAAE,CAAA,CAAC,SAAS,CAAC,CAAC,CAAC;YACb,iBAAiB,CAAC,aAAa,EAAE,SAAS,CAAC,CAAC;QAC9C,CAAC;IACH,CAAC;AACH,CAAC","file":"route-tree-builder.js","sourceRoot":"","sourcesContent":["import * as _             from 'lodash';\nimport emptyRouteResolver from './empty-route-resolver/empty-route-resolver';\nimport endpointsCombiner  from './endpoints-combiner/endpoints-combiner';\n\nexport default function routeTreeBuilder(route, roleRoutes, roleEndpoints, index = 0) {\n  let {paths} = route;\n  let path = paths[index];\n  let childIndex = index + 1;\n  let childPath = paths[childIndex];\n  let [routeInfo] = _.filter(roleRoutes, {path});\n  \n  if(!routeInfo) {\n    routeInfo = {path};\n  }\n  \n  if(roleRoutes.indexOf(routeInfo) === -1) {\n    roleRoutes.push(routeInfo);\n  }\n\n  if(childPath) {\n    let {children} = routeInfo;\n      \n    if(!children) {\n      let pathsToEmpty = paths.slice(0, childIndex);\n      let emptyRoute = emptyRouteResolver.call(this, pathsToEmpty);\n        \n      _.extend(routeInfo, {children: children = []});\n        \n      if(emptyRoute) {\n        children.push(emptyRoute);\n      }\n    }\n  \n    routeTreeBuilder.call(this, route, children, roleEndpoints, childIndex);    \n  } else {\n    let {default: _default, endpoints} = route;\n      \n    if(_default) {\n      _.extend(routeInfo, {default: _default});\n    }\n      \n    if(endpoints) {\n      endpointsCombiner(roleEndpoints, endpoints);\n    }    \n  }\n}\n"]}